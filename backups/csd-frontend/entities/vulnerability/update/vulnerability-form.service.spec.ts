import { TestBed } from '@angular/core/testing';

import { sampleWithRequiredData, sampleWithNewData } from '../vulnerability.test-samples';

import { VulnerabilityFormService } from './vulnerability-form.service';

describe('Vulnerability Form Service', () => {
  let service: VulnerabilityFormService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(VulnerabilityFormService);
  });

  describe('Service methods', () => {
    describe('createVulnerabilityFormGroup', () => {
      it('should create a new form with FormControl', () => {
        const formGroup = service.createVulnerabilityFormGroup();

        expect(formGroup.controls).toEqual(
          expect.objectContaining({
            id: expect.any(Object),
            name: expect.any(Object),
            description: expect.any(Object),
            reference: expect.any(Object),
            refId: expect.any(Object),
            risks: expect.any(Object),
            proposals: expect.any(Object),
            mitigations: expect.any(Object),
            threats: expect.any(Object),
          })
        );
      });

      it('passing IVulnerability should create a new form with FormGroup', () => {
        const formGroup = service.createVulnerabilityFormGroup(sampleWithRequiredData);

        expect(formGroup.controls).toEqual(
          expect.objectContaining({
            id: expect.any(Object),
            name: expect.any(Object),
            description: expect.any(Object),
            reference: expect.any(Object),
            refId: expect.any(Object),
            risks: expect.any(Object),
            proposals: expect.any(Object),
            mitigations: expect.any(Object),
            threats: expect.any(Object),
          })
        );
      });
    });

    describe('getVulnerability', () => {
      it('should return NewVulnerability for default Vulnerability initial value', () => {
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        const formGroup = service.createVulnerabilityFormGroup(sampleWithNewData);

        const vulnerability = service.getVulnerability(formGroup) as any;

        expect(vulnerability).toMatchObject(sampleWithNewData);
      });

      it('should return NewVulnerability for empty Vulnerability initial value', () => {
        const formGroup = service.createVulnerabilityFormGroup();

        const vulnerability = service.getVulnerability(formGroup) as any;

        expect(vulnerability).toMatchObject({});
      });

      it('should return IVulnerability', () => {
        const formGroup = service.createVulnerabilityFormGroup(sampleWithRequiredData);

        const vulnerability = service.getVulnerability(formGroup) as any;

        expect(vulnerability).toMatchObject(sampleWithRequiredData);
      });
    });

    describe('resetForm', () => {
      it('passing IVulnerability should not enable id FormControl', () => {
        const formGroup = service.createVulnerabilityFormGroup();
        expect(formGroup.controls.id.disabled).toBe(true);

        service.resetForm(formGroup, sampleWithRequiredData);

        expect(formGroup.controls.id.disabled).toBe(true);
      });

      it('passing NewVulnerability should disable id FormControl', () => {
        const formGroup = service.createVulnerabilityFormGroup(sampleWithRequiredData);
        expect(formGroup.controls.id.disabled).toBe(true);

        service.resetForm(formGroup, { id: null });

        expect(formGroup.controls.id.disabled).toBe(true);
      });
    });
  });
});
