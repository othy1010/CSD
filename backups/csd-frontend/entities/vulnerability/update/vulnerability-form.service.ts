import { Injectable } from '@angular/core';
import { FormGroup, FormControl, Validators } from '@angular/forms';

import { IVulnerability, NewVulnerability } from '../vulnerability.model';

/**
 * A partial Type with required key is used as form input.
 */
type PartialWithRequiredKeyOf<T extends { id: unknown }> = Partial<Omit<T, 'id'>> & { id: T['id'] };

/**
 * Type for createFormGroup and resetForm argument.
 * It accepts IVulnerability for edit and NewVulnerabilityFormGroupInput for create.
 */
type VulnerabilityFormGroupInput = IVulnerability | PartialWithRequiredKeyOf<NewVulnerability>;

type VulnerabilityFormDefaults = Pick<NewVulnerability, 'id' | 'risks' | 'proposals' | 'mitigations' | 'threats'>;

type VulnerabilityFormGroupContent = {
  id: FormControl<IVulnerability['id'] | NewVulnerability['id']>;
  name: FormControl<IVulnerability['name']>;
  description: FormControl<IVulnerability['description']>;
  reference: FormControl<IVulnerability['reference']>;
  refId: FormControl<IVulnerability['refId']>;
  risks: FormControl<IVulnerability['risks']>;
  proposals: FormControl<IVulnerability['proposals']>;
  mitigations: FormControl<IVulnerability['mitigations']>;
  threats: FormControl<IVulnerability['threats']>;
};

export type VulnerabilityFormGroup = FormGroup<VulnerabilityFormGroupContent>;

@Injectable({ providedIn: 'root' })
export class VulnerabilityFormService {
  createVulnerabilityFormGroup(vulnerability: VulnerabilityFormGroupInput = { id: null }): VulnerabilityFormGroup {
    const vulnerabilityRawValue = {
      ...this.getFormDefaults(),
      ...vulnerability,
    };
    return new FormGroup<VulnerabilityFormGroupContent>({
      id: new FormControl(
        { value: vulnerabilityRawValue.id, disabled: true },
        {
          nonNullable: true,
          validators: [Validators.required],
        }
      ),
      name: new FormControl(vulnerabilityRawValue.name),
      description: new FormControl(vulnerabilityRawValue.description),
      reference: new FormControl(vulnerabilityRawValue.reference),
      refId: new FormControl(vulnerabilityRawValue.refId),
      risks: new FormControl(vulnerabilityRawValue.risks ?? []),
      proposals: new FormControl(vulnerabilityRawValue.proposals ?? []),
      mitigations: new FormControl(vulnerabilityRawValue.mitigations ?? []),
      threats: new FormControl(vulnerabilityRawValue.threats ?? []),
    });
  }

  getVulnerability(form: VulnerabilityFormGroup): IVulnerability | NewVulnerability {
    return form.getRawValue() as IVulnerability | NewVulnerability;
  }

  resetForm(form: VulnerabilityFormGroup, vulnerability: VulnerabilityFormGroupInput): void {
    const vulnerabilityRawValue = { ...this.getFormDefaults(), ...vulnerability };
    form.reset(
      {
        ...vulnerabilityRawValue,
        id: { value: vulnerabilityRawValue.id, disabled: true },
      } as any /* cast to workaround https://github.com/angular/angular/issues/46458 */
    );
  }

  private getFormDefaults(): VulnerabilityFormDefaults {
    return {
      id: null,
      risks: [],
      proposals: [],
      mitigations: [],
      threats: [],
    };
  }
}
