package org.csd.core.repository;

import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Optional;
import java.util.stream.IntStream;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.csd.core.domain.Vulnerability;
import org.hibernate.annotations.QueryHints;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;

/**
 * Utility repository to load bag relationships based on https://vladmihalcea.com/hibernate-multiplebagfetchexception/
 */
public class VulnerabilityRepositoryWithBagRelationshipsImpl implements VulnerabilityRepositoryWithBagRelationships {

    @PersistenceContext
    private EntityManager entityManager;

    @Override
    public Optional<Vulnerability> fetchBagRelationships(Optional<Vulnerability> vulnerability) {
        return vulnerability.map(this::fetchRisks).map(this::fetchProposals);
    }

    @Override
    public Page<Vulnerability> fetchBagRelationships(Page<Vulnerability> vulnerabilities) {
        return new PageImpl<>(
            fetchBagRelationships(vulnerabilities.getContent()),
            vulnerabilities.getPageable(),
            vulnerabilities.getTotalElements()
        );
    }

    @Override
    public List<Vulnerability> fetchBagRelationships(List<Vulnerability> vulnerabilities) {
        return Optional.of(vulnerabilities).map(this::fetchRisks).map(this::fetchProposals).orElse(Collections.emptyList());
    }

    Vulnerability fetchRisks(Vulnerability result) {
        return entityManager
            .createQuery(
                "select vulnerability from Vulnerability vulnerability left join fetch vulnerability.risks where vulnerability is :vulnerability",
                Vulnerability.class
            )
            .setParameter("vulnerability", result)
            .setHint(QueryHints.PASS_DISTINCT_THROUGH, false)
            .getSingleResult();
    }

    List<Vulnerability> fetchRisks(List<Vulnerability> vulnerabilities) {
        HashMap<Object, Integer> order = new HashMap<>();
        IntStream.range(0, vulnerabilities.size()).forEach(index -> order.put(vulnerabilities.get(index).getId(), index));
        List<Vulnerability> result = entityManager
            .createQuery(
                "select distinct vulnerability from Vulnerability vulnerability left join fetch vulnerability.risks where vulnerability in :vulnerabilities",
                Vulnerability.class
            )
            .setParameter("vulnerabilities", vulnerabilities)
            .setHint(QueryHints.PASS_DISTINCT_THROUGH, false)
            .getResultList();
        Collections.sort(result, (o1, o2) -> Integer.compare(order.get(o1.getId()), order.get(o2.getId())));
        return result;
    }

    Vulnerability fetchProposals(Vulnerability result) {
        return entityManager
            .createQuery(
                "select vulnerability from Vulnerability vulnerability left join fetch vulnerability.proposals where vulnerability is :vulnerability",
                Vulnerability.class
            )
            .setParameter("vulnerability", result)
            .setHint(QueryHints.PASS_DISTINCT_THROUGH, false)
            .getSingleResult();
    }

    List<Vulnerability> fetchProposals(List<Vulnerability> vulnerabilities) {
        HashMap<Object, Integer> order = new HashMap<>();
        IntStream.range(0, vulnerabilities.size()).forEach(index -> order.put(vulnerabilities.get(index).getId(), index));
        List<Vulnerability> result = entityManager
            .createQuery(
                "select distinct vulnerability from Vulnerability vulnerability left join fetch vulnerability.proposals where vulnerability in :vulnerabilities",
                Vulnerability.class
            )
            .setParameter("vulnerabilities", vulnerabilities)
            .setHint(QueryHints.PASS_DISTINCT_THROUGH, false)
            .getResultList();
        Collections.sort(result, (o1, o2) -> Integer.compare(order.get(o1.getId()), order.get(o2.getId())));
        return result;
    }
}
