import { browser, ExpectedConditions as ec, promise } from 'protractor';
import { NavBarPage, SignInPage } from '../../page-objects/jhi-page-objects';

import { VulnerabilityComponentsPage, VulnerabilityDeleteDialog, VulnerabilityUpdatePage } from './vulnerability.page-object';

const expect = chai.expect;

describe('Vulnerability e2e test', () => {
  let navBarPage: NavBarPage;
  let signInPage: SignInPage;
  let vulnerabilityComponentsPage: VulnerabilityComponentsPage;
  let vulnerabilityUpdatePage: VulnerabilityUpdatePage;
  let vulnerabilityDeleteDialog: VulnerabilityDeleteDialog;
  const username = process.env.E2E_USERNAME ?? 'admin';
  const password = process.env.E2E_PASSWORD ?? 'admin';

  before(async () => {
    await browser.get('/');
    navBarPage = new NavBarPage();
    signInPage = await navBarPage.getSignInPage();
    await signInPage.autoSignInUsing(username, password);
    await browser.wait(ec.visibilityOf(navBarPage.entityMenu), 5000);
  });

  it('should load Vulnerabilities', async () => {
    await navBarPage.goToEntity('vulnerability');
    vulnerabilityComponentsPage = new VulnerabilityComponentsPage();
    await browser.wait(ec.visibilityOf(vulnerabilityComponentsPage.title), 5000);
    expect(await vulnerabilityComponentsPage.getTitle()).to.eq('csdApp.vulnerability.home.title');
    await browser.wait(
      ec.or(ec.visibilityOf(vulnerabilityComponentsPage.entities), ec.visibilityOf(vulnerabilityComponentsPage.noResult)),
      1000
    );
  });

  it('should load create Vulnerability page', async () => {
    await vulnerabilityComponentsPage.clickOnCreateButton();
    vulnerabilityUpdatePage = new VulnerabilityUpdatePage();
    expect(await vulnerabilityUpdatePage.getPageTitle()).to.eq('csdApp.vulnerability.home.createOrEditLabel');
    await vulnerabilityUpdatePage.cancel();
  });

  it('should create and save Vulnerabilities', async () => {
    const nbButtonsBeforeCreate = await vulnerabilityComponentsPage.countDeleteButtons();

    await vulnerabilityComponentsPage.clickOnCreateButton();

    await promise.all([
      vulnerabilityUpdatePage.setNameInput('name'),
      vulnerabilityUpdatePage.setDescriptionInput('description'),
      vulnerabilityUpdatePage.referenceSelectLastOption(),
      vulnerabilityUpdatePage.setRefIdInput('refId'),
      // vulnerabilityUpdatePage.riskSelectLastOption(),
      // vulnerabilityUpdatePage.proposalSelectLastOption(),
    ]);

    await vulnerabilityUpdatePage.save();
    expect(await vulnerabilityUpdatePage.getSaveButton().isPresent(), 'Expected save button disappear').to.be.false;

    expect(await vulnerabilityComponentsPage.countDeleteButtons()).to.eq(nbButtonsBeforeCreate + 1, 'Expected one more entry in the table');
  });

  it('should delete last Vulnerability', async () => {
    const nbButtonsBeforeDelete = await vulnerabilityComponentsPage.countDeleteButtons();
    await vulnerabilityComponentsPage.clickOnLastDeleteButton();

    vulnerabilityDeleteDialog = new VulnerabilityDeleteDialog();
    expect(await vulnerabilityDeleteDialog.getDialogTitle()).to.eq('csdApp.vulnerability.delete.question');
    await vulnerabilityDeleteDialog.clickOnConfirmButton();
    await browser.wait(ec.visibilityOf(vulnerabilityComponentsPage.title), 5000);

    expect(await vulnerabilityComponentsPage.countDeleteButtons()).to.eq(nbButtonsBeforeDelete - 1);
  });

  after(async () => {
    await navBarPage.autoSignOut();
  });
});
