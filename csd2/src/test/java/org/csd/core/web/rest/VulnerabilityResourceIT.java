package org.csd.core.web.rest;

import static org.assertj.core.api.Assertions.assertThat;
import static org.hamcrest.Matchers.hasItem;
import static org.mockito.Mockito.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.concurrent.atomic.AtomicLong;
import javax.persistence.EntityManager;
import org.csd.core.IntegrationTest;
import org.csd.core.domain.Vulnerability;
import org.csd.core.domain.enumeration.VulnerabilityReference;
import org.csd.core.repository.VulnerabilityRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.http.MediaType;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.transaction.annotation.Transactional;

/**
 * Integration tests for the {@link VulnerabilityResource} REST controller.
 */
@IntegrationTest
@ExtendWith(MockitoExtension.class)
@AutoConfigureMockMvc
@WithMockUser
class VulnerabilityResourceIT {

    private static final String DEFAULT_NAME = "AAAAAAAAAA";
    private static final String UPDATED_NAME = "BBBBBBBBBB";

    private static final String DEFAULT_DESCRIPTION = "AAAAAAAAAA";
    private static final String UPDATED_DESCRIPTION = "BBBBBBBBBB";

    private static final VulnerabilityReference DEFAULT_REFERENCE = VulnerabilityReference.CVE;
    private static final VulnerabilityReference UPDATED_REFERENCE = VulnerabilityReference.CWE;

    private static final String DEFAULT_REF_ID = "AAAAAAAAAA";
    private static final String UPDATED_REF_ID = "BBBBBBBBBB";

    private static final String ENTITY_API_URL = "/api/vulnerabilities";
    private static final String ENTITY_API_URL_ID = ENTITY_API_URL + "/{id}";

    private static Random random = new Random();
    private static AtomicLong count = new AtomicLong(random.nextInt() + (2 * Integer.MAX_VALUE));

    @Autowired
    private VulnerabilityRepository vulnerabilityRepository;

    @Mock
    private VulnerabilityRepository vulnerabilityRepositoryMock;

    @Autowired
    private EntityManager em;

    @Autowired
    private MockMvc restVulnerabilityMockMvc;

    private Vulnerability vulnerability;

    /**
     * Create an entity for this test.
     *
     * This is a static method, as tests for other entities might also need it,
     * if they test an entity which requires the current entity.
     */
    public static Vulnerability createEntity(EntityManager em) {
        Vulnerability vulnerability = new Vulnerability()
            .name(DEFAULT_NAME)
            .description(DEFAULT_DESCRIPTION)
            .reference(DEFAULT_REFERENCE)
            .refId(DEFAULT_REF_ID);
        return vulnerability;
    }

    /**
     * Create an updated entity for this test.
     *
     * This is a static method, as tests for other entities might also need it,
     * if they test an entity which requires the current entity.
     */
    public static Vulnerability createUpdatedEntity(EntityManager em) {
        Vulnerability vulnerability = new Vulnerability()
            .name(UPDATED_NAME)
            .description(UPDATED_DESCRIPTION)
            .reference(UPDATED_REFERENCE)
            .refId(UPDATED_REF_ID);
        return vulnerability;
    }

    @BeforeEach
    public void initTest() {
        vulnerability = createEntity(em);
    }

    @Test
    @Transactional
    void createVulnerability() throws Exception {
        int databaseSizeBeforeCreate = vulnerabilityRepository.findAll().size();
        // Create the Vulnerability
        restVulnerabilityMockMvc
            .perform(post(ENTITY_API_URL).contentType(MediaType.APPLICATION_JSON).content(TestUtil.convertObjectToJsonBytes(vulnerability)))
            .andExpect(status().isCreated());

        // Validate the Vulnerability in the database
        List<Vulnerability> vulnerabilityList = vulnerabilityRepository.findAll();
        assertThat(vulnerabilityList).hasSize(databaseSizeBeforeCreate + 1);
        Vulnerability testVulnerability = vulnerabilityList.get(vulnerabilityList.size() - 1);
        assertThat(testVulnerability.getName()).isEqualTo(DEFAULT_NAME);
        assertThat(testVulnerability.getDescription()).isEqualTo(DEFAULT_DESCRIPTION);
        assertThat(testVulnerability.getReference()).isEqualTo(DEFAULT_REFERENCE);
        assertThat(testVulnerability.getRefId()).isEqualTo(DEFAULT_REF_ID);
    }

    @Test
    @Transactional
    void createVulnerabilityWithExistingId() throws Exception {
        // Create the Vulnerability with an existing ID
        vulnerability.setId(1L);

        int databaseSizeBeforeCreate = vulnerabilityRepository.findAll().size();

        // An entity with an existing ID cannot be created, so this API call must fail
        restVulnerabilityMockMvc
            .perform(post(ENTITY_API_URL).contentType(MediaType.APPLICATION_JSON).content(TestUtil.convertObjectToJsonBytes(vulnerability)))
            .andExpect(status().isBadRequest());

        // Validate the Vulnerability in the database
        List<Vulnerability> vulnerabilityList = vulnerabilityRepository.findAll();
        assertThat(vulnerabilityList).hasSize(databaseSizeBeforeCreate);
    }

    @Test
    @Transactional
    void getAllVulnerabilities() throws Exception {
        // Initialize the database
        vulnerabilityRepository.saveAndFlush(vulnerability);

        // Get all the vulnerabilityList
        restVulnerabilityMockMvc
            .perform(get(ENTITY_API_URL + "?sort=id,desc"))
            .andExpect(status().isOk())
            .andExpect(content().contentType(MediaType.APPLICATION_JSON_VALUE))
            .andExpect(jsonPath("$.[*].id").value(hasItem(vulnerability.getId().intValue())))
            .andExpect(jsonPath("$.[*].name").value(hasItem(DEFAULT_NAME)))
            .andExpect(jsonPath("$.[*].description").value(hasItem(DEFAULT_DESCRIPTION)))
            .andExpect(jsonPath("$.[*].reference").value(hasItem(DEFAULT_REFERENCE.toString())))
            .andExpect(jsonPath("$.[*].refId").value(hasItem(DEFAULT_REF_ID)));
    }

    @SuppressWarnings({ "unchecked" })
    void getAllVulnerabilitiesWithEagerRelationshipsIsEnabled() throws Exception {
        when(vulnerabilityRepositoryMock.findAllWithEagerRelationships(any())).thenReturn(new PageImpl(new ArrayList<>()));

        restVulnerabilityMockMvc.perform(get(ENTITY_API_URL + "?eagerload=true")).andExpect(status().isOk());

        verify(vulnerabilityRepositoryMock, times(1)).findAllWithEagerRelationships(any());
    }

    @SuppressWarnings({ "unchecked" })
    void getAllVulnerabilitiesWithEagerRelationshipsIsNotEnabled() throws Exception {
        when(vulnerabilityRepositoryMock.findAllWithEagerRelationships(any())).thenReturn(new PageImpl(new ArrayList<>()));

        restVulnerabilityMockMvc.perform(get(ENTITY_API_URL + "?eagerload=false")).andExpect(status().isOk());
        verify(vulnerabilityRepositoryMock, times(1)).findAll(any(Pageable.class));
    }

    @Test
    @Transactional
    void getVulnerability() throws Exception {
        // Initialize the database
        vulnerabilityRepository.saveAndFlush(vulnerability);

        // Get the vulnerability
        restVulnerabilityMockMvc
            .perform(get(ENTITY_API_URL_ID, vulnerability.getId()))
            .andExpect(status().isOk())
            .andExpect(content().contentType(MediaType.APPLICATION_JSON_VALUE))
            .andExpect(jsonPath("$.id").value(vulnerability.getId().intValue()))
            .andExpect(jsonPath("$.name").value(DEFAULT_NAME))
            .andExpect(jsonPath("$.description").value(DEFAULT_DESCRIPTION))
            .andExpect(jsonPath("$.reference").value(DEFAULT_REFERENCE.toString()))
            .andExpect(jsonPath("$.refId").value(DEFAULT_REF_ID));
    }

    @Test
    @Transactional
    void getNonExistingVulnerability() throws Exception {
        // Get the vulnerability
        restVulnerabilityMockMvc.perform(get(ENTITY_API_URL_ID, Long.MAX_VALUE)).andExpect(status().isNotFound());
    }

    @Test
    @Transactional
    void putExistingVulnerability() throws Exception {
        // Initialize the database
        vulnerabilityRepository.saveAndFlush(vulnerability);

        int databaseSizeBeforeUpdate = vulnerabilityRepository.findAll().size();

        // Update the vulnerability
        Vulnerability updatedVulnerability = vulnerabilityRepository.findById(vulnerability.getId()).get();
        // Disconnect from session so that the updates on updatedVulnerability are not directly saved in db
        em.detach(updatedVulnerability);
        updatedVulnerability.name(UPDATED_NAME).description(UPDATED_DESCRIPTION).reference(UPDATED_REFERENCE).refId(UPDATED_REF_ID);

        restVulnerabilityMockMvc
            .perform(
                put(ENTITY_API_URL_ID, updatedVulnerability.getId())
                    .contentType(MediaType.APPLICATION_JSON)
                    .content(TestUtil.convertObjectToJsonBytes(updatedVulnerability))
            )
            .andExpect(status().isOk());

        // Validate the Vulnerability in the database
        List<Vulnerability> vulnerabilityList = vulnerabilityRepository.findAll();
        assertThat(vulnerabilityList).hasSize(databaseSizeBeforeUpdate);
        Vulnerability testVulnerability = vulnerabilityList.get(vulnerabilityList.size() - 1);
        assertThat(testVulnerability.getName()).isEqualTo(UPDATED_NAME);
        assertThat(testVulnerability.getDescription()).isEqualTo(UPDATED_DESCRIPTION);
        assertThat(testVulnerability.getReference()).isEqualTo(UPDATED_REFERENCE);
        assertThat(testVulnerability.getRefId()).isEqualTo(UPDATED_REF_ID);
    }

    @Test
    @Transactional
    void putNonExistingVulnerability() throws Exception {
        int databaseSizeBeforeUpdate = vulnerabilityRepository.findAll().size();
        vulnerability.setId(count.incrementAndGet());

        // If the entity doesn't have an ID, it will throw BadRequestAlertException
        restVulnerabilityMockMvc
            .perform(
                put(ENTITY_API_URL_ID, vulnerability.getId())
                    .contentType(MediaType.APPLICATION_JSON)
                    .content(TestUtil.convertObjectToJsonBytes(vulnerability))
            )
            .andExpect(status().isBadRequest());

        // Validate the Vulnerability in the database
        List<Vulnerability> vulnerabilityList = vulnerabilityRepository.findAll();
        assertThat(vulnerabilityList).hasSize(databaseSizeBeforeUpdate);
    }

    @Test
    @Transactional
    void putWithIdMismatchVulnerability() throws Exception {
        int databaseSizeBeforeUpdate = vulnerabilityRepository.findAll().size();
        vulnerability.setId(count.incrementAndGet());

        // If url ID doesn't match entity ID, it will throw BadRequestAlertException
        restVulnerabilityMockMvc
            .perform(
                put(ENTITY_API_URL_ID, count.incrementAndGet())
                    .contentType(MediaType.APPLICATION_JSON)
                    .content(TestUtil.convertObjectToJsonBytes(vulnerability))
            )
            .andExpect(status().isBadRequest());

        // Validate the Vulnerability in the database
        List<Vulnerability> vulnerabilityList = vulnerabilityRepository.findAll();
        assertThat(vulnerabilityList).hasSize(databaseSizeBeforeUpdate);
    }

    @Test
    @Transactional
    void putWithMissingIdPathParamVulnerability() throws Exception {
        int databaseSizeBeforeUpdate = vulnerabilityRepository.findAll().size();
        vulnerability.setId(count.incrementAndGet());

        // If url ID doesn't match entity ID, it will throw BadRequestAlertException
        restVulnerabilityMockMvc
            .perform(put(ENTITY_API_URL).contentType(MediaType.APPLICATION_JSON).content(TestUtil.convertObjectToJsonBytes(vulnerability)))
            .andExpect(status().isMethodNotAllowed());

        // Validate the Vulnerability in the database
        List<Vulnerability> vulnerabilityList = vulnerabilityRepository.findAll();
        assertThat(vulnerabilityList).hasSize(databaseSizeBeforeUpdate);
    }

    @Test
    @Transactional
    void partialUpdateVulnerabilityWithPatch() throws Exception {
        // Initialize the database
        vulnerabilityRepository.saveAndFlush(vulnerability);

        int databaseSizeBeforeUpdate = vulnerabilityRepository.findAll().size();

        // Update the vulnerability using partial update
        Vulnerability partialUpdatedVulnerability = new Vulnerability();
        partialUpdatedVulnerability.setId(vulnerability.getId());

        partialUpdatedVulnerability.reference(UPDATED_REFERENCE);

        restVulnerabilityMockMvc
            .perform(
                patch(ENTITY_API_URL_ID, partialUpdatedVulnerability.getId())
                    .contentType("application/merge-patch+json")
                    .content(TestUtil.convertObjectToJsonBytes(partialUpdatedVulnerability))
            )
            .andExpect(status().isOk());

        // Validate the Vulnerability in the database
        List<Vulnerability> vulnerabilityList = vulnerabilityRepository.findAll();
        assertThat(vulnerabilityList).hasSize(databaseSizeBeforeUpdate);
        Vulnerability testVulnerability = vulnerabilityList.get(vulnerabilityList.size() - 1);
        assertThat(testVulnerability.getName()).isEqualTo(DEFAULT_NAME);
        assertThat(testVulnerability.getDescription()).isEqualTo(DEFAULT_DESCRIPTION);
        assertThat(testVulnerability.getReference()).isEqualTo(UPDATED_REFERENCE);
        assertThat(testVulnerability.getRefId()).isEqualTo(DEFAULT_REF_ID);
    }

    @Test
    @Transactional
    void fullUpdateVulnerabilityWithPatch() throws Exception {
        // Initialize the database
        vulnerabilityRepository.saveAndFlush(vulnerability);

        int databaseSizeBeforeUpdate = vulnerabilityRepository.findAll().size();

        // Update the vulnerability using partial update
        Vulnerability partialUpdatedVulnerability = new Vulnerability();
        partialUpdatedVulnerability.setId(vulnerability.getId());

        partialUpdatedVulnerability.name(UPDATED_NAME).description(UPDATED_DESCRIPTION).reference(UPDATED_REFERENCE).refId(UPDATED_REF_ID);

        restVulnerabilityMockMvc
            .perform(
                patch(ENTITY_API_URL_ID, partialUpdatedVulnerability.getId())
                    .contentType("application/merge-patch+json")
                    .content(TestUtil.convertObjectToJsonBytes(partialUpdatedVulnerability))
            )
            .andExpect(status().isOk());

        // Validate the Vulnerability in the database
        List<Vulnerability> vulnerabilityList = vulnerabilityRepository.findAll();
        assertThat(vulnerabilityList).hasSize(databaseSizeBeforeUpdate);
        Vulnerability testVulnerability = vulnerabilityList.get(vulnerabilityList.size() - 1);
        assertThat(testVulnerability.getName()).isEqualTo(UPDATED_NAME);
        assertThat(testVulnerability.getDescription()).isEqualTo(UPDATED_DESCRIPTION);
        assertThat(testVulnerability.getReference()).isEqualTo(UPDATED_REFERENCE);
        assertThat(testVulnerability.getRefId()).isEqualTo(UPDATED_REF_ID);
    }

    @Test
    @Transactional
    void patchNonExistingVulnerability() throws Exception {
        int databaseSizeBeforeUpdate = vulnerabilityRepository.findAll().size();
        vulnerability.setId(count.incrementAndGet());

        // If the entity doesn't have an ID, it will throw BadRequestAlertException
        restVulnerabilityMockMvc
            .perform(
                patch(ENTITY_API_URL_ID, vulnerability.getId())
                    .contentType("application/merge-patch+json")
                    .content(TestUtil.convertObjectToJsonBytes(vulnerability))
            )
            .andExpect(status().isBadRequest());

        // Validate the Vulnerability in the database
        List<Vulnerability> vulnerabilityList = vulnerabilityRepository.findAll();
        assertThat(vulnerabilityList).hasSize(databaseSizeBeforeUpdate);
    }

    @Test
    @Transactional
    void patchWithIdMismatchVulnerability() throws Exception {
        int databaseSizeBeforeUpdate = vulnerabilityRepository.findAll().size();
        vulnerability.setId(count.incrementAndGet());

        // If url ID doesn't match entity ID, it will throw BadRequestAlertException
        restVulnerabilityMockMvc
            .perform(
                patch(ENTITY_API_URL_ID, count.incrementAndGet())
                    .contentType("application/merge-patch+json")
                    .content(TestUtil.convertObjectToJsonBytes(vulnerability))
            )
            .andExpect(status().isBadRequest());

        // Validate the Vulnerability in the database
        List<Vulnerability> vulnerabilityList = vulnerabilityRepository.findAll();
        assertThat(vulnerabilityList).hasSize(databaseSizeBeforeUpdate);
    }

    @Test
    @Transactional
    void patchWithMissingIdPathParamVulnerability() throws Exception {
        int databaseSizeBeforeUpdate = vulnerabilityRepository.findAll().size();
        vulnerability.setId(count.incrementAndGet());

        // If url ID doesn't match entity ID, it will throw BadRequestAlertException
        restVulnerabilityMockMvc
            .perform(
                patch(ENTITY_API_URL).contentType("application/merge-patch+json").content(TestUtil.convertObjectToJsonBytes(vulnerability))
            )
            .andExpect(status().isMethodNotAllowed());

        // Validate the Vulnerability in the database
        List<Vulnerability> vulnerabilityList = vulnerabilityRepository.findAll();
        assertThat(vulnerabilityList).hasSize(databaseSizeBeforeUpdate);
    }

    @Test
    @Transactional
    void deleteVulnerability() throws Exception {
        // Initialize the database
        vulnerabilityRepository.saveAndFlush(vulnerability);

        int databaseSizeBeforeDelete = vulnerabilityRepository.findAll().size();

        // Delete the vulnerability
        restVulnerabilityMockMvc
            .perform(delete(ENTITY_API_URL_ID, vulnerability.getId()).accept(MediaType.APPLICATION_JSON))
            .andExpect(status().isNoContent());

        // Validate the database contains one less item
        List<Vulnerability> vulnerabilityList = vulnerabilityRepository.findAll();
        assertThat(vulnerabilityList).hasSize(databaseSizeBeforeDelete - 1);
    }
}
