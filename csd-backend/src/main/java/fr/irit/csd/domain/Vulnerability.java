package fr.irit.csd.domain;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import java.io.Serializable;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.*;
import fr.irit.csd.domain.enumeration.VulnerabilityReference;
import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;

/**
 * A Vulnerability.
 */
@Entity
@Table(name = "vulnerability")
@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
@SuppressWarnings("common-java:DuplicatedBlocks")
public class Vulnerability implements Serializable {

    private static final long serialVersionUID = 1L;

    @Id
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "sequenceGenerator")
    @SequenceGenerator(name = "sequenceGenerator")
    @Column(name = "id")
    private Long id;

    @Column(name = "name")
    private String name;

    @Column(name = "description")
    private String description;

    @Enumerated(EnumType.STRING)
    @Column(name = "reference")
    private VulnerabilityReference reference;

    @Column(name = "ref_id")
    private String refId;

    @ManyToMany
    @JoinTable(
        name = "rel_vulnerability__risk",
        joinColumns = @JoinColumn(name = "vulnerability_id"),
        inverseJoinColumns = @JoinColumn(name = "risk_id")
    )
    @Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
    @JsonIgnoreProperties(value = { "proposals", "vulnerabilities" }, allowSetters = true)
    private Set<Risk> risks = new HashSet<>();

    @ManyToMany
    @JoinTable(
        name = "rel_vulnerability__proposal",
        joinColumns = @JoinColumn(name = "vulnerability_id"),
        inverseJoinColumns = @JoinColumn(name = "proposal_id")
    )
    @Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
    @JsonIgnoreProperties(value = { "changes", "user", "risks", "collaboration", "decisions", "vulnerabilities" }, allowSetters = true)
    private Set<Proposal> proposals = new HashSet<>();

    @ManyToMany(mappedBy = "vulnerabilities")
    @Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
    @JsonIgnoreProperties(value = { "vulnerabilities" }, allowSetters = true)
    private Set<Mitigation> mitigations = new HashSet<>();

    @ManyToMany(mappedBy = "vulnerabilities")
    @Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
    @JsonIgnoreProperties(value = { "vulnerabilities" }, allowSetters = true)
    private Set<Threat> threats = new HashSet<>();

    // Csd-needle-entity-add-field - Csd will add fields here

    public Long getId() {
        return this.id;
    }

    public Vulnerability id(Long id) {
        this.setId(id);
        return this;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return this.name;
    }

    public Vulnerability name(String name) {
        this.setName(name);
        return this;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getDescription() {
        return this.description;
    }

    public Vulnerability description(String description) {
        this.setDescription(description);
        return this;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public VulnerabilityReference getReference() {
        return this.reference;
    }

    public Vulnerability reference(VulnerabilityReference reference) {
        this.setReference(reference);
        return this;
    }

    public void setReference(VulnerabilityReference reference) {
        this.reference = reference;
    }

    public String getRefId() {
        return this.refId;
    }

    public Vulnerability refId(String refId) {
        this.setRefId(refId);
        return this;
    }

    public void setRefId(String refId) {
        this.refId = refId;
    }

    public Set<Risk> getRisks() {
        return this.risks;
    }

    public void setRisks(Set<Risk> risks) {
        this.risks = risks;
    }

    public Vulnerability risks(Set<Risk> risks) {
        this.setRisks(risks);
        return this;
    }

    public Vulnerability addRisk(Risk risk) {
        this.risks.add(risk);
        risk.getVulnerabilities().add(this);
        return this;
    }

    public Vulnerability removeRisk(Risk risk) {
        this.risks.remove(risk);
        risk.getVulnerabilities().remove(this);
        return this;
    }

    public Set<Proposal> getProposals() {
        return this.proposals;
    }

    public void setProposals(Set<Proposal> proposals) {
        this.proposals = proposals;
    }

    public Vulnerability proposals(Set<Proposal> proposals) {
        this.setProposals(proposals);
        return this;
    }

    public Vulnerability addProposal(Proposal proposal) {
        this.proposals.add(proposal);
        proposal.getVulnerabilities().add(this);
        return this;
    }

    public Vulnerability removeProposal(Proposal proposal) {
        this.proposals.remove(proposal);
        proposal.getVulnerabilities().remove(this);
        return this;
    }

    public Set<Mitigation> getMitigations() {
        return this.mitigations;
    }

    public void setMitigations(Set<Mitigation> mitigations) {
        if (this.mitigations != null) {
            this.mitigations.forEach(i -> i.removeVulnerability(this));
        }
        if (mitigations != null) {
            mitigations.forEach(i -> i.addVulnerability(this));
        }
        this.mitigations = mitigations;
    }

    public Vulnerability mitigations(Set<Mitigation> mitigations) {
        this.setMitigations(mitigations);
        return this;
    }

    public Vulnerability addMitigations(Mitigation mitigation) {
        this.mitigations.add(mitigation);
        mitigation.getVulnerabilities().add(this);
        return this;
    }

    public Vulnerability removeMitigations(Mitigation mitigation) {
        this.mitigations.remove(mitigation);
        mitigation.getVulnerabilities().remove(this);
        return this;
    }

    public Set<Threat> getThreats() {
        return this.threats;
    }

    public void setThreats(Set<Threat> threats) {
        if (this.threats != null) {
            this.threats.forEach(i -> i.removeVulnerability(this));
        }
        if (threats != null) {
            threats.forEach(i -> i.addVulnerability(this));
        }
        this.threats = threats;
    }

    public Vulnerability threats(Set<Threat> threats) {
        this.setThreats(threats);
        return this;
    }

    public Vulnerability addThreat(Threat threat) {
        this.threats.add(threat);
        threat.getVulnerabilities().add(this);
        return this;
    }

    public Vulnerability removeThreat(Threat threat) {
        this.threats.remove(threat);
        threat.getVulnerabilities().remove(this);
        return this;
    }

    // Csd-needle-entity-add-getters-setters - Csd will add getters and setters here

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof Vulnerability)) {
            return false;
        }
        return id != null && id.equals(((Vulnerability) o).id);
    }

    @Override
    public int hashCode() {
        // see https://vladmihalcea.com/how-to-implement-equals-and-hashcode-using-the-jpa-entity-identifier/
        return getClass().hashCode();
    }

    // prettier-ignore
    @Override
    public String toString() {
        return "Vulnerability{" +
            "id=" + getId() +
            ", name='" + getName() + "'" +
            ", description='" + getDescription() + "'" +
            ", reference='" + getReference() + "'" +
            ", refId='" + getRefId() + "'" +
            "}";
    }
}
