import { Component, OnInit } from '@angular/core';
import { HttpResponse } from '@angular/common/http';
import { ActivatedRoute } from '@angular/router';
import { Observable } from 'rxjs';
import { finalize, map } from 'rxjs/operators';

import { VulnerabilityFormService, VulnerabilityFormGroup } from './vulnerability-form.service';
import { IVulnerability } from '../vulnerability.model';
import { VulnerabilityService } from '../service/vulnerability.service';
import { IRisk } from 'app/entities/risk/risk.model';
import { RiskService } from 'app/entities/risk/service/risk.service';
import { IProposal } from 'app/entities/proposal/proposal.model';
import { ProposalService } from 'app/entities/proposal/service/proposal.service';
import { VulnerabilityReference } from 'app/entities/enumerations/vulnerability-reference.model';

@Component({
  selector: 'csdvulnerability-update',
  templateUrl: './vulnerability-update.component.html',
})
export class VulnerabilityUpdateComponent implements OnInit {
  isSaving = false;
  vulnerability: IVulnerability | null = null;
  vulnerabilityReferenceValues = Object.keys(VulnerabilityReference);

  risksSharedCollection: IRisk[] = [];
  proposalsSharedCollection: IProposal[] = [];

  editForm: VulnerabilityFormGroup = this.vulnerabilityFormService.createVulnerabilityFormGroup();

  constructor(
    protected vulnerabilityService: VulnerabilityService,
    protected vulnerabilityFormService: VulnerabilityFormService,
    protected riskService: RiskService,
    protected proposalService: ProposalService,
    protected activatedRoute: ActivatedRoute
  ) {}

  compareRisk = (o1: IRisk | null, o2: IRisk | null): boolean => this.riskService.compareRisk(o1, o2);

  compareProposal = (o1: IProposal | null, o2: IProposal | null): boolean => this.proposalService.compareProposal(o1, o2);

  ngOnInit(): void {
    this.activatedRoute.data.subscribe(({ vulnerability }) => {
      this.vulnerability = vulnerability;
      if (vulnerability) {
        this.updateForm(vulnerability);
      }

      this.loadRelationshipsOptions();
    });
  }

  previousState(): void {
    window.history.back();
  }

  save(): void {
    this.isSaving = true;
    const vulnerability = this.vulnerabilityFormService.getVulnerability(this.editForm);
    if (vulnerability.id !== null) {
      this.subscribeToSaveResponse(this.vulnerabilityService.update(vulnerability));
    } else {
      this.subscribeToSaveResponse(this.vulnerabilityService.create(vulnerability));
    }
  }

  protected subscribeToSaveResponse(result: Observable<HttpResponse<IVulnerability>>): void {
    result.pipe(finalize(() => this.onSaveFinalize())).subscribe({
      next: () => this.onSaveSuccess(),
      error: () => this.onSaveError(),
    });
  }

  protected onSaveSuccess(): void {
    this.previousState();
  }

  protected onSaveError(): void {
    // Api for inheritance.
  }

  protected onSaveFinalize(): void {
    this.isSaving = false;
  }

  protected updateForm(vulnerability: IVulnerability): void {
    this.vulnerability = vulnerability;
    this.vulnerabilityFormService.resetForm(this.editForm, vulnerability);

    this.risksSharedCollection = this.riskService.addRiskToCollectionIfMissing<IRisk>(
      this.risksSharedCollection,
      ...(vulnerability.risks ?? [])
    );
    this.proposalsSharedCollection = this.proposalService.addProposalToCollectionIfMissing<IProposal>(
      this.proposalsSharedCollection,
      ...(vulnerability.proposals ?? [])
    );
  }

  protected loadRelationshipsOptions(): void {
    this.riskService
      .query()
      .pipe(map((res: HttpResponse<IRisk[]>) => res.body ?? []))
      .pipe(map((risks: IRisk[]) => this.riskService.addRiskToCollectionIfMissing<IRisk>(risks, ...(this.vulnerability?.risks ?? []))))
      .subscribe((risks: IRisk[]) => (this.risksSharedCollection = risks));

    this.proposalService
      .query()
      .pipe(map((res: HttpResponse<IProposal[]>) => res.body ?? []))
      .pipe(
        map((proposals: IProposal[]) =>
          this.proposalService.addProposalToCollectionIfMissing<IProposal>(proposals, ...(this.vulnerability?.proposals ?? []))
        )
      )
      .subscribe((proposals: IProposal[]) => (this.proposalsSharedCollection = proposals));
  }
}
